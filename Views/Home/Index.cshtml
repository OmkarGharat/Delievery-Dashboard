@using Delievery_Dashboard.ViewModel;
@{
    ViewData["Title"] = "Home Page";
}

@model CombinedViewModel;

<style>
    .grey-placeholder {
        color: grey;
        opacity: 1;
    }

    .h2-7 {
        height: 2.7rem !important;
    }

    .top-7 {
        top: -7px !important;
    }

    #AcualEfforts {
        width: 30rem !important;
    }
</style>

@using (Html.BeginForm("Submit", "Home", FormMethod.Post, new { id = "myForm", @class = "form-horizontal needs-validation" }))
{
    <div class="row mb-3 p-4 shadow">
        <div class="themed-grid-col w-100 d-flex justify-content-evenly align-items-center">

            @await Html.PartialAsync("_TextBoxPartial", Model.TextBox)

            <div class="form-group d-flex flex-column w-100">
                @* <label for="TaskDescription" class="form-label col-sm-2 top-7 w-100"></label> *@
                @Html.LabelFor(m => m.DelieveryDashboard.TaskDescription, new { @class = "form-label col-sm-2 top-7 w-100" })
                @Html.TextAreaFor(m => m.DelieveryDashboard.TaskDescription, new
                    {
                        @class = "form-control mt-2 mb-2 p-2",
                        id = "TaskDescription",
                        rows = "2",
                        @style = "height: 43.19px;"
                    })
                @Html.ValidationMessageFor(m => m.DelieveryDashboard.TaskDescription, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <div class="row mb-3 p-4 shadow" style="box-shadow: 2px 2px 7px 0 rgb(0,0,0,0.2);">
        <div class="col-4 themed-grid-col">
            @await Html.PartialAsync("_ComplexityDropDown", Model.DelieveryDashboard)
        </div>
        <div class="col-4 themed-grid-col">
            @await Html.PartialAsync("_ClassificationDropDown", Model.DelieveryDashboard)
        </div>
        <div class="col-4 themed-grid-col">
            @await Html.PartialAsync("_ResourcesDropDown", Model.DelieveryDashboard)
        </div>
        <div class="col-4 themed-grid-col">
            @await Html.PartialAsync("_AssetDropDown", Model.DelieveryDashboard)
        </div>
        <div class="col-4 themed-grid-col">
            @await Html.PartialAsync("_PracticeHeadDropDown", Model.DelieveryDashboard)
        </div>
        <div class="col-4 themed-grid-col">
            @await Html.PartialAsync("_AccountManagerDropDown", Model.DelieveryDashboard)
        </div>
        <div class="col-4 themed-grid-col">
            @await Html.PartialAsync("_DeliveryManagerDropDown", Model.DelieveryDashboard)
        </div>
        <div class="col-4 themed-grid-col">
            @await Html.PartialAsync("_RoleDropDown", Model.DelieveryDashboard)
        </div>

        <div class="col-4 themed-grid-col">
            @Html.LabelFor(m => m.DelieveryDashboard.PlanStartDate)
            @Html.EditorFor(m => m.DelieveryDashboard.PlanStartDate, new { htmlAttributes = new { @class = "form-control datepicker", @type = "date", @id = "PlanStartDate" } })
        </div>

        <div class="col-4 themed-grid-col">
            @Html.LabelFor(m => m.DelieveryDashboard.PlanEndDate)
            @Html.EditorFor(m => m.DelieveryDashboard.PlanEndDate, new { htmlAttributes = new { @class = "form-control datepicker", @type = "date", @id = "PlanEndDate" } })
        </div>

        <div class="col-4 themed-grid-col">
            @Html.LabelFor(m => m.DelieveryDashboard.ActualStartDate)
            @Html.EditorFor(m => m.DelieveryDashboard.ActualStartDate, new { htmlAttributes = new { @class = "form-control datepicker", @type = "date", @id = "ActualStartDate" } })
        </div>

        <div class="col-4 themed-grid-col">
            @Html.LabelFor(m => m.DelieveryDashboard.ActualEndDate)
            @Html.EditorFor(m => m.DelieveryDashboard.ActualEndDate, new { htmlAttributes = new { @class = "form-control datepicker", @type = "date", @id = "ActualEndDate" } })
        </div>

    </div>

    <div class="col-12">
        <button class="btn btn-primary" type="submit">Submit form</button>
    </div>

}

<script>
    $(function () {
        var today = new Date().toISOString().split('T')[0];

        function handleDateChange() {
            var selectedValue = $(this).val();
            console.log("Selected Date: " + selectedValue);
        }

        // Get today's date in the format 'YYYY-MM-DD'
        var today = new Date().toISOString().split('T')[0];

        // Set the default value for all datepickers
        $(".datepicker").val(today);

        // Attach the change event handler to all datepickers
        $(".datepicker").change(handleDateChange);

    });


</script>